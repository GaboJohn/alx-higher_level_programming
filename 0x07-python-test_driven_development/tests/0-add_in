to Use 0-add_integer.py
===========================

This module explains a function that adds integers ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)```returns sum of its two arguments.

>>> add_integer(1, 2)
3

>>> add_integer(1, -2)
-1

Function also works with floating-point values.

>>> add_integer(1.0, 2.0)
3

Note that floats are casted to integers before addition is performed.

>>> add_integer(1.9, 0.1)
1

Floating and non-floating point values can be combined.

>>> add_integer(1.9, -2)
-1

Second argument is optional - by default, it is 98.

>>> add_integer(7)
105

Non-Numbers
===========
`add_integer(..)` expects both arguments are either int or float.
TypeError is raised if argument is not int 0r float.

>>> add_integer("num", 1)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, "num")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(1.2, None)
Traceback (most recent call last):
TypeError: a must be an integer

Function will fail if infinity is provided.

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(2, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

If both arguments are not integers and floats, a TypeError message is only printed for the first argument.

>>> add_integer("hello", "there")
Traceback (most recent call last):
TypeError: a must be an integer

With NaN numbers.

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

This documentation provides examples of how to use the `add_integer` function with various inputs and explains the behavior in case of non-integer or non-float inputs.
